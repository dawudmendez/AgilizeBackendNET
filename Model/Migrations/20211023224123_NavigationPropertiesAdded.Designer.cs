// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;
using Model.Context;

namespace Model.Migrations
{
    [DbContext(typeof(MySQLDBContext))]
    [Migration("20211023224123_NavigationPropertiesAdded")]
    partial class NavigationPropertiesAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Model.Entities.Backlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Backlogs");
                });

            modelBuilder.Entity("Model.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Model.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TeamId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Model.Entities.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MainItemId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedItemId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainItemId");

                    b.HasIndex("RelatedItemId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("Model.Entities.Sprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("Model.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Model.Entities.WorkItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("BacklogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<DateTime>("SprintEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SprintStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("BacklogId");

                    b.ToTable("WorkItems");
                });

            modelBuilder.Entity("Model.Entities.Backlog", b =>
                {
                    b.HasOne("Model.Entities.Team", "Team")
                        .WithOne("Backlog")
                        .HasForeignKey("Model.Entities.Backlog", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Model.Entities.Position", b =>
                {
                    b.HasOne("Model.Entities.Person", "Person")
                        .WithMany("Positions")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Team", "Team")
                        .WithMany("Positions")
                        .HasForeignKey("TeamId");

                    b.Navigation("Person");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Model.Entities.Relationship", b =>
                {
                    b.HasOne("Model.Entities.WorkItem", "MainItem")
                        .WithMany("RelationshipsSource")
                        .HasForeignKey("MainItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.WorkItem", "RelatedItem")
                        .WithMany("RelationshipsDestination")
                        .HasForeignKey("RelatedItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainItem");

                    b.Navigation("RelatedItem");
                });

            modelBuilder.Entity("Model.Entities.Sprint", b =>
                {
                    b.HasOne("Model.Entities.Team", "Team")
                        .WithMany("Sprints")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.HasOne("Model.Entities.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("Model.Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Model.Entities.WorkItem", b =>
                {
                    b.HasOne("Model.Entities.Position", "Assignment")
                        .WithMany("WorkItems")
                        .HasForeignKey("AssignmentId");

                    b.HasOne("Model.Entities.Backlog", "Backlog")
                        .WithMany("WorkItems")
                        .HasForeignKey("BacklogId");

                    b.Navigation("Assignment");

                    b.Navigation("Backlog");
                });

            modelBuilder.Entity("Model.Entities.Backlog", b =>
                {
                    b.Navigation("WorkItems");
                });

            modelBuilder.Entity("Model.Entities.Person", b =>
                {
                    b.Navigation("Positions");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Entities.Position", b =>
                {
                    b.Navigation("WorkItems");
                });

            modelBuilder.Entity("Model.Entities.Team", b =>
                {
                    b.Navigation("Backlog");

                    b.Navigation("Positions");

                    b.Navigation("Sprints");
                });

            modelBuilder.Entity("Model.Entities.WorkItem", b =>
                {
                    b.Navigation("RelationshipsDestination");

                    b.Navigation("RelationshipsSource");
                });
#pragma warning restore 612, 618
        }
    }
}
